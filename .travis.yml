sudo: true
dist: trusty
language: python
python:
  - "3.5"
services:
  - docker
jobs:
  include:
  - stage: Building preCICE
    if: fork = false
    name: "Arch Linux"
    script:
    - python build_base.py --dockerfile Dockerfile.Arch --docker-username $DOCKER_USERNAME
    after_success:
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
    - docker push $DOCKER_USERNAME/precice-arch-develop:latest

  - stage: Building preCICE
    if: fork = false
    name: "Ubuntu 16.04 home"
    script:
    - python build_base.py --dockerfile Dockerfile.Ubuntu1604.home --docker-username $DOCKER_USERNAME
    after_success:
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
    - docker push $DOCKER_USERNAME/precice-ubuntu1604.home-develop:latest
    
  - stage: Building preCICE 
    if: fork = false
    name: "Ubuntu 16.04.home(debugMasterSockets)"
    script:
    - python build_base.py --branch debugMasterSockets --dockerfile Dockerfile.Ubuntu1604.home --docker-username $DOCKER_USERNAME
    after_success:
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
    - docker push $DOCKER_USERNAME/Dockerfile.Ubuntu1604.home-debugMasterSockets

  - stage: Building preCICE
    if: type = cron
    name: "Ubuntu 16.04.sudo"
    script:
    - python build_base.py --dockerfile Dockerfile.Ubuntu1604.sudo --docker-username $DOCKER_USERNAME
    after_success:
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
    - docker push $DOCKER_USERNAME/precice-ubuntu1604.sudo-develop:latest

  - stage: Building preCICE
    if: type = cron
    name: "Ubuntu 16.04.package"
    script:
    - python build_base.py --dockerfile Dockerfile.Ubuntu1604.package --docker-username $DOCKER_USERNAME
    after_success:
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
    - docker push $DOCKER_USERNAME/precice-ubuntu1604.package-develop:latest

  - stage: Building preCICE
    name: "Ubuntu 18.04.home"
    if: type = cron
    script:
    - python build_base.py --dockerfile Dockerfile.Ubuntu1804.home --docker-username $DOCKER_USERNAME
    after_success:
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
    - docker push $DOCKER_USERNAME/precice-ubuntu1804.home-develop:latest
    
  - stage: Building preCICE 
    if: fork = false
    name: "Ubuntu 18.04.home(debugMasterSockets)"
    script:
    - python build_base.py --branch debugMasterSockets  --dockerfile Dockerfile.Ubuntu1804.home --docker-username $DOCKER_USERNAME
    after_success:
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
    - docker push $DOCKER_USERNAME/Dockerfile.Ubuntu1804.home-debugMasterSockets

  - stage: Building preCICE
    name: "Ubuntu 18.04.sudo"
    if: type = cron
    script:
    - python build_base.py --dockerfile Dockerfile.Ubuntu1804.sudo --docker-username $DOCKER_USERNAME
    after_success:
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
    - docker push $DOCKER_USERNAME/precice-ubuntu1804.sudo-develop

  - stage: Building preCICE
    name: "Ubuntu 18.04.sudo.mpich"
    if: type = cron
    script:
    - python build_base.py --dockerfile Dockerfile.Ubuntu1804.sudo.mpich --docker-username $DOCKER_USERNAME   
    after_success:
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
    - docker push $DOCKER_USERNAME/precice-ubuntu1804.sudo.mpich-develop:latest

  - stage: Building preCICE
    name: "Ubuntu 18.04.package"
    if: fork = false
    script:
    - python build_base.py --dockerfile Dockerfile.Ubuntu1804.package --docker-username $DOCKER_USERNAME   
    after_success:
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
    - docker push $DOCKER_USERNAME/precice-ubuntu1804.package-develop

  - name: "[Build on fork] Using cached version"
    if: fork = true
    script: true


  - stage: System Tests
    script:
    - python system_testing.py -s su2-ccx
    name: "[16.04] SU2 <-> Calculix"
    after_success:
    - python push.py -s -t su2-ccx
    after_failure:
    - python push.py -t su2-ccx
  - script:
    - python system_testing.py -s of-of
    name: "[16.04] OpenFOAM <-> OpenFOAM"
    after_success:
    - python push.py -s -t of-of
    after_failure:
    - python push.py -t of-of
  - script:
    - python system_testing.py -s of-ccx
    name: "[16.04] Calculix <-> OpenFOAM"
    after_success:
    - python push.py -s -t of-ccx
    after_failure:
    - python push.py -t of-ccx
  - script:
    - python system_testing.py -s bindings
    name: "[16.04] Bindings"
    after_success:
    - python push.py -s -t bindings
    after_failure:
    - python push.py -t bindings
  - script:
    - python system_testing.py -s dealii-of
    name: "[16.04] deal.ii <-> OpenFOAM"
    after_success:
    - python push.py -s -t dealii-of
    after_failure:
    - python push.py -t dealii-of
  - script:
    - python system_testing.py -s cplscheme -b debugMasterSockets -d Dockerfile.Ubuntu1804.home
    name: "[18.04] cplscheme"
    